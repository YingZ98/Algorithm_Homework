# Leetcode 69 Sqrt(x) 
class Solution:
    def mySqrt(self, x: int) -> int:
        r = x
        while r*r > x:
            r = (r + x/r) // 2
        return int(r)


# Leetcode 852 Peak Index in a Mountain Array 
class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        head = 0
        last = len(A)-1        
        while head != last:
            if A[head] > A[last]:
                last -= 1
            else:
                head += 1
        return head


# Leetcode 74 Search a 2D Matrix
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix: return False
        row = len(matrix)
        col = len(matrix[0])
        left = 0
        right = row * col
        while left < right:
            mid = left + (right - left) // 2
            if matrix[mid // col][mid % col] < target:
                left = mid + 1
            else:
                right = mid
        #print(left,right)
        return left < row * col and matrix[left // col][left % col] == target


# Leetcode 34 Find First and Last Position of Element in Sorted Array
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if not target in nums: 
            return [-1, -1]
        l, r = 0, len(nums)-1
        while l<r:
            mid = (l+r)//2
            if nums[mid] < target:
                l = mid+1
            else:
                r = mid  
        for i in range(l, len(nums)):
            if nums[i] != target:
                break
            r = i   
        return [l ,r]
       
