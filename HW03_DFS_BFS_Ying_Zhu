Lintcode 376 & Leetcode 113 Binary Tree Path Sum II
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """ 
        paths = []

        def traverse(root, sum, path=[]):
            if root is None:
                return 
            if root.left is None and root.right is None:
                new_path = path+[root.val]
                if sum == root.val:
                    paths.append(path+[root.val])
            elif root.left is None:
                traverse(root.right, sum-root.val, path+[root.val])
            elif root.right is None:
                traverse(root.left, sum-root.val, path+[root.val])
            else:
                traverse(root.left, sum-root.val, path+[root.val])
                traverse(root.right, sum-root.val, path+[root.val])
        traverse(root, sum)
        return paths

Leetcode 95 Unique Binary Search Trees II
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
import functools
class Solution:
    def generateTrees(self, n: int) -> List[TreeNode]:
        if n == 0: return []
        @functools.lru_cache(None)
        def helper(start, end):
            res = []
            if start > end:
                res.append(None)
            for val in range(start, end + 1):
                for left in helper(start, val - 1):
                    for right in helper(val + 1, end):
                        root = TreeNode(val)
                        root.left = left
                        root.right = right
                        res.append(root)
            return res

        return helper(1, n)
        
Leetcode 200 Number of Islands
class Solution:    
    def setTwo(self, i: int, j: int):
        if i < 0 or i >= self.m or j < 0 or j >= self.n or self.grid[i][j] != '1':
            return
        
        self.grid[i][j] = '2'
        self.setTwo(i+1, j)
        self.setTwo(i, j+1)
        self.setTwo(i-1, j)
        self.setTwo(i, j-1)
        
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        
        self.grid, num_of_island, self.m, self.n = grid, 0, len(grid), len(grid[0])
        
        if self.m == 0 or self.n == 0:
            return 0
        
        for i in range(self.m):
            for j in range(self.n):
                if grid[i][j] == '1':
                    num_of_island = num_of_island + 1
                    self.setTwo(i, j)
        return num_of_island

Leetcode 107 Binary Tree Level Order Traversal II
class Solution:
    def levelOrderBottom(self, root):
        queue = []                                                  
        cur = [root]                                               
        while cur:                                                  
            cur_layer_val = []                                      
            next_layer_node = []                                    
            for node in cur:                                        
                if node:                                            
                    cur_layer_val.append(node.val)                  
                    next_layer_node.extend([node.left, node.right]) 
            if cur_layer_val:                                      
                queue.insert(0, cur_layer_val)                      
            cur = next_layer_node                                   
        return queue                                                
