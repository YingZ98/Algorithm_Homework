# Leetcode 50 Calculate pow(x , n):
class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """
        if n<0:
            x = 1/x
            n = -n 
        res =1
        while n!=0:
            if n%2 == 0:
                x *= x
                n /= 2
            else:
                res*=x
                n=n-1
        return res
        
        
# Leetcode 14 Longest Common Prefix: 
class Solution:
    def __init__(self):
        self.trie = {}
        self.end = '$'

    def trieInsert(self, word):
        node = self.trie
        for c in word:
            if c not in node:
                node[c] = {}
            node = node[c]
        node[self.end] = self.end

    def longestCommonPrefix(self, strs) -> str:
        ans = ''
        for w in strs:
            self.trieInsert(w)
        trie = self.trie
        while self.end not in trie.keys() and len(trie.keys()) == 1:
            key = next(iter(trie))
            ans += key
            trie = trie[key]
        return ans
     

# Leetcode 23 Merge K Sorted Lists: 
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if l1 is None : return l2
        if l2 is None : return l1
        if l1.val<= l2.val:
            res = l1
            l1 = l1.next
            res.next = self.mergeTwoLists(l1,l2)
        else:
            res = l2
            l2 = l2.next
            res.next = self.mergeTwoLists(l1,l2)
        return res

    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if not lists: return None
        if len(lists) ==1 : return lists[0]
        if len(lists) ==2 : return self.mergeTwoLists(lists[0],lists[1])
        return self.mergeTwoLists(self.mergeKLists(lists[:len(lists)//2]),self.mergeKLists(lists[len(lists)//2:]))


# Leetcode 4 Median of Two Sorted Arrays:
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        l1=len(nums1)
        l2=len(nums2)
        l=l1+l2
        if l==0:
            return None
        if l==1:
            if nums1:
                return nums1[-1]
            if nums2:
                return nums2[-1]
        num=[]
        i=j=0
        while i<len(nums1) and j<len(nums2):
            if nums1[i]<nums2[j]:
                num.append(nums1[i])
                i+=1
            elif nums1[i]>nums2[j]:
                num.append(nums2[j])
                j+=1
            else:
                num.append(nums1[i])
                num.append(nums2[j])
                i+=1
                j+=1
        while i<len(nums1):
            num.append(nums1[i])
            i+=1
        while j<len(nums2):
            num.append(nums2[j])
            j+=1
        if l%2==0:
            return float((num[l//2-1]+num[l//2])/2)
        else:
            return float(num[l//2])

